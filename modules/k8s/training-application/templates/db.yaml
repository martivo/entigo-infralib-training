
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: initdb-config
data:
  0001.migrate-schema.sql: |
    SET character_set_server = 'utf8mb4';
    SET collation_server = 'utf8mb4_estonian_ci';
    CREATE USER '{{ .Values.api.db.user }}'@'%' IDENTIFIED BY '{{ .Values.api.db.pass }}';
    CREATE USER '{{ .Values.form.db.user }}'@'%' IDENTIFIED BY '{{ .Values.form.db.pass }}';
    GRANT SELECT ON *.* TO '{{ .Values.api.db.user }}'@'%';
    GRANT SELECT ON *.* TO '{{ .Values.form.db.user }}'@'%';
    FLUSH PRIVILEGES;
    SET names 'utf8mb4';
    CREATE TABLE advertisement (
      id INT AUTO_INCREMENT PRIMARY KEY,
      title TEXT NOT NULL,
      content TEXT NOT NULL,
      created_at TIMESTAMP NOT NULL DEFAULT (UTC_TIMESTAMP)
    );
    GRANT INSERT, UPDATE ON advertisement TO '{{ .Values.form.db.user }}'@'%';

---
apiVersion: batch/v1
kind: Job
metadata:
  name: db-update
  labels:
    category: application
spec:
  #Once a Job reaches activeDeadlineSeconds, all of its running Pods are terminated and the Job status will become type: Failed with reason: DeadlineExceeded.
  activeDeadlineSeconds: 600
  #Keep 1 pods running.
  parallelism: 1
  #Need to make 1 time finish
  completions: 1
  template:
    spec:
      volumes:
        - name: initdb-volume
          configMap:
            name: initdb-config
      containers:
      - name: python
        volumeMounts:
        - name: initdb-volume
          mountPath: /app/src/migrations
        image: {{ .Values.image.repository }}{{ .Values.dbupdate.image }}
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        command: ["yoyo"]
        args: [ "apply" ]
        envFrom:
          - configMapRef:
              name: api-conf
          - secretRef:
              name: db-update
      restartPolicy: Never
  # There are situations where you want to fail a Job after some amount of retries due to a logical error in configuration etc.
  backoffLimit: 10

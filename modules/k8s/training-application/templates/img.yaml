apiVersion: apiextensions.crossplane.io/v1
kind: CompositeResourceDefinition
metadata:
  name: compositeobjectstoragebuckets.entigo.io
  annotations:
      argocd.argoproj.io/sync-wave: "-4"
spec:
  group: entigo.io
  names:
    kind: CompositeObjectStorageBucket
    plural: compositeobjectstoragebuckets
  claimNames:
    kind: ObjectStorageBucket
    plural: objectstoragebuckets
  connectionSecretKeys:
    - account_id
    - account_key
    - bucket_name
    - bucket_region
  versions:
  - name: v1alpha1
    served: true
    referenceable: true
    schema:
      openAPIV3Schema:
        type: object
        properties:
          spec:
            type: object
            properties:
              parameters:
                type: object
                properties:
                  # The full name of the bucket
                  name:
                    type: string
                required:
                  - name
            required:
              - parameters
---
apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: privates3objectstoragebucket
  annotations:
      argocd.argoproj.io/sync-wave: "-3"
  labels:
    provider: aws
    # Could have multiple classes, for different purposes
    class: default
spec:
  writeConnectionSecretsToNamespace: crossplane-system
  compositeTypeRef:
    apiVersion: entigo.io/v1alpha1
    kind: CompositeObjectStorageBucket
  resources:
    # Main S3 Bucket
    - name: bucket
      base:
        apiVersion: s3.aws.upbound.io/v1beta1
        kind: Bucket
        spec:
          deletionPolicy: Delete
          providerConfigRef:
            name: crossplane-aws
          writeConnectionSecretToRef:
            namespace: crossplane-system
          forProvider:
            forceDestroy: true  # This enables force deletion of non-empty buckets
            region: eu-north-1
            tags:
              created-by: "crossplane-composition"
      patches:
        - fromFieldPath: "spec.parameters.name"
          toFieldPath: "metadata.name"
        - fromFieldPath: "spec.parameters.name"
          toFieldPath: "spec.writeConnectionSecretToRef.name"
          transforms:
          - type: string
            string:
              fmt: "%s-connection-details"
      connectionDetails:
        - name: bucket_name
          fromConnectionSecretKey: id
        - name: bucket_region
          fromConnectionSecretKey: region

    # Bucket Ownership Controls
    - name: bucket-ownership
      base:
        apiVersion: s3.aws.upbound.io/v1beta1
        kind: BucketOwnershipControls
        spec:
          deletionPolicy: Delete
          providerConfigRef:
            name: crossplane-aws
          forProvider:
            rule:
            - objectOwnership: BucketOwnerPreferred
            region: eu-north-1
      patches:
        - fromFieldPath: "spec.parameters.name"
          toFieldPath: "spec.forProvider.bucketRef.name"
        - fromFieldPath: "spec.parameters.name"
          toFieldPath: "metadata.name"
          transforms:
          - type: string
            string:
              fmt: "%s-ownership"

    # Public Access Block Configuration
    - name: bucket-public-access-block
      base:
        apiVersion: s3.aws.upbound.io/v1beta1
        kind: BucketPublicAccessBlock
        spec:
          deletionPolicy: Delete
          providerConfigRef:
            name: crossplane-aws
          forProvider:
            blockPublicPolicy: true
            blockPublicAcls: true
            ignorePublicAcls: true
            restrictPublicBuckets: true
            region: eu-north-1
      patches:
        - fromFieldPath: "spec.parameters.name"
          toFieldPath: "spec.forProvider.bucketRef.name"
        - fromFieldPath: "spec.parameters.name"
          toFieldPath: "metadata.name"
          transforms:
          - type: string
            string:
              fmt: "%s-public-access-block"

    # Versioning Configuration
    - name: bucket-versioning
      base:
        apiVersion: s3.aws.upbound.io/v1beta1
        kind: BucketVersioning
        spec:
          deletionPolicy: Delete
          providerConfigRef:
            name: crossplane-aws
          forProvider:
            versioningConfiguration:
            - status: Suspended
            region: eu-north-1
      patches:
        - fromFieldPath: "spec.parameters.name"
          toFieldPath: "spec.forProvider.bucketRef.name"
        - fromFieldPath: "spec.parameters.name"
          toFieldPath: "metadata.name"
          transforms:
          - type: string
            string:
              fmt: "%s-versioning"

    # Server Side Encryption Configuration
    - name: bucket-encryption
      base:
        apiVersion: s3.aws.upbound.io/v1beta1
        kind: BucketServerSideEncryptionConfiguration
        spec:
          deletionPolicy: Delete
          providerConfigRef:
            name: crossplane-aws
          forProvider:
            rule:
            - applyServerSideEncryptionByDefault:
              - sseAlgorithm: AES256
            region: eu-north-1
      patches:
        - fromFieldPath: "spec.parameters.name"
          toFieldPath: "spec.forProvider.bucketRef.name"
        - fromFieldPath: "spec.parameters.name"
          toFieldPath: "metadata.name"
          transforms:
          - type: string
            string:
              fmt: "%s-encryption"

          
    # IAM Policy for bucket access - Updated to Upbound provider
    - name: bucket-policy
      base:
        apiVersion: iam.aws.upbound.io/v1beta1
        kind: Policy
        spec:
          deletionPolicy: Delete
          providerConfigRef:
            name: crossplane-aws
          writeConnectionSecretToRef:
            namespace: crossplane-system
          forProvider:
            path: "/"
      patches:
        # We'll use the name defined in the claim/composite resource for the bucket name
        # We suffix it with '-bucket-access-policy'
        - fromFieldPath: "spec.parameters.name"
          toFieldPath: "metadata.name"
          transforms:
          - type: string
            string:
              fmt: "%s-bucket-access-policy"
        # Use the bucket name + the '-bucket-access-policy' suffix
        # This will be the resulting name in aws
        # Each bucket name must be unique, so this in turn will be unique
        - fromFieldPath: "spec.parameters.name"
          toFieldPath: "spec.forProvider.name"
          transforms:
          - type: string
            string:
              fmt: "%s-bucket-access-policy"
        - fromFieldPath: "spec.parameters.name"
          toFieldPath: "spec.forProvider.description"
          transforms:
          - type: string
            string:
              fmt: "Policy for access to the %s bucket"
        # CombineForComposite works just like the string transforms above
        # Except we can define multiple placeholders in the fmt
        # We need crossplane >= 1.3.0 for this feature
        - type: CombineFromComposite
          toFieldPath: "spec.forProvider.policy"
          policy:
            fromFieldPath: Required
          combine:
            variables:
              - fromFieldPath: spec.parameters.name
              - fromFieldPath: spec.parameters.name
              - fromFieldPath: spec.parameters.name
            strategy: string
            # This policy gives a user full access to the bucket and bucket objects
            string:
              fmt: |
                {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Action": ["s3:*"],
                      "Resource": [
                        "arn:aws:s3:::%s"
                      ]
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "s3:*"
                      ],
                      "Resource": [
                        "arn:aws:s3:::%s",
                        "arn:aws:s3:::%s/*"
                      ]
                    }
                  ]
                }
        - fromFieldPath: "spec.parameters.name"
          toFieldPath: "spec.writeConnectionSecretToRef.name"
          transforms:
          - type: string
            string:
              fmt: "%s-policy-details"

    # IAM User - Updated to Upbound provider
    - name: bucket-user
      base:
        apiVersion: iam.aws.upbound.io/v1beta1
        kind: User
        spec:
          deletionPolicy: Delete
          providerConfigRef:
            name: crossplane-aws
          writeConnectionSecretToRef:
            namespace: crossplane-system
          forProvider:
            path: "/"
      patches:
        # Use bucket name suffixed with '-user'
        # This will be the username of the iam account in AWS
        - fromFieldPath: "spec.parameters.name"
          toFieldPath: "metadata.name"
          transforms:
          - type: string
            string:
              fmt: "%s-user"
        - fromFieldPath: "spec.parameters.name"
          toFieldPath: "spec.writeConnectionSecretToRef.name"
          transforms:
          - type: string
            string:
              fmt: "%s-user-details"

    # IAM User Policy Attachment - Updated to Upbound provider
    - name: user-policy-attachment
      base:
        apiVersion: iam.aws.upbound.io/v1beta1
        kind: UserPolicyAttachment
        spec:
          deletionPolicy: Delete
          providerConfigRef:
            name: crossplane-aws
          writeConnectionSecretToRef:
            namespace: crossplane-system
          # The contents of this are patched in below
          forProvider: {}
      patches:
        - fromFieldPath: "spec.parameters.name"
          toFieldPath: "metadata.name"
          transforms:
          - type: string
            string:
              fmt: "%s-user-bucket-policy"
        # Reference the policy we created above
        - fromFieldPath: "spec.parameters.name"
          toFieldPath: "spec.forProvider.policyArnRef.name"
          transforms:
          - type: string
            string:
              fmt: "%s-bucket-access-policy"
        # Reference the user we created above
        - fromFieldPath: "spec.parameters.name"
          toFieldPath: "spec.forProvider.userRef.name"
          transforms:
          - type: string
            string:
              fmt: "%s-user"
        - fromFieldPath: "spec.parameters.name"
          toFieldPath: "spec.writeConnectionSecretToRef.name"
          transforms:
          - type: string
            string:
              fmt: "%s-user-policy-details"

    # IAM Access Key - Updated to Upbound provider
    - name: access-key
      base:
        apiVersion: iam.aws.upbound.io/v1beta1
        kind: AccessKey
        spec:
          deletionPolicy: Delete
          providerConfigRef:
            name: crossplane-aws
          writeConnectionSecretToRef:
            namespace: crossplane-system
          forProvider: {}
      patches:
        - fromFieldPath: "spec.parameters.name"
          toFieldPath: "metadata.name"
          transforms:
          - type: string
            string:
              fmt: "%s-user-access-key"
        # Reference the user we created above
        - fromFieldPath: "spec.parameters.name"
          toFieldPath: "spec.forProvider.userRef.name"
          transforms:
          - type: string
            string:
              fmt: "%s-user"
        - fromFieldPath: "spec.parameters.name"
          toFieldPath: "spec.writeConnectionSecretToRef.name"
          transforms:
          - type: string
            string:
              fmt: "%s-user-access-key"
      connectionDetails:
        # Fixed connection details for Upbound provider AccessKey
        - name: account_id
          fromConnectionSecretKey: id
        - name: account_key
          fromConnectionSecretKey: secret
---
apiVersion: entigo.io/v1alpha1
kind: ObjectStorageBucket
metadata:
  name: img
  annotations:
    argocd.argoproj.io/sync-wave: "-2"
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
spec:
  parameters:
    # You would need to change this to something unique
    name: "entigo-training-img-{{ randAlphaNum 10 | lower }}"
  compositionSelector:
    matchLabels:
      provider: aws
      class: default
  writeConnectionSecretToRef:
    name: img

---
apiVersion: v1
kind: Service
metadata:
  name: img
spec:
  ports:
  - name: http
    port: 80
    protocol: TCP
    targetPort: 3003
  selector:
    app: img
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: img
  annotations:
    ingress.kubernetes.io/ssl-redirect: "false"
    alb.ingress.kubernetes.io/backend-protocol: HTTP
    alb.ingress.kubernetes.io/group.name: external
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTP":80,"HTTPS":443}]'
spec:
  ingressClassName: alb
  rules:
  - host: {{ .Values.ingress.hostname }}
    http:
      paths:
      - path: /img
        pathType: Prefix
        backend:
          service:
            name: img
            port: 
              number: 80
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: img
spec:
  minAvailable: {{ .Values.minAvailable }}
  selector:
    matchLabels:
      app: img
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: img
  labels:
    category: application
spec:
  replicas: {{ .Values.replicaCount }}
  revisionHistoryLimit: 3
  selector:
    matchLabels:
      app: img
  template:
    metadata:
      labels:
        app: img
        category: database
    spec:
      terminationGracePeriodSeconds: 10
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchLabels:
                  app: img
              topologyKey: kubernetes.io/hostname
      containers:
      - name: golang
        image: {{ .Values.image.repository }}{{ .Values.img.image }}
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        readinessProbe:
          tcpSocket:
            port: 3003
          initialDelaySeconds: 5
          timeoutSeconds: 15
          periodSeconds: 5
        resources:
          {{- toYaml .Values.resources | nindent 10 }}
        ports:
        - containerPort: 3003
          name: http-img
        env:
        - name: S3_REGION
          valueFrom:
            secretKeyRef:
              name: img
              key: bucket_region
        - name: S3_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: img
              key: account_id
        - name: S3_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: img
              key: account_key
        - name: S3_BUCKET
          valueFrom:
            secretKeyRef:
              name: img
              key: bucket_name

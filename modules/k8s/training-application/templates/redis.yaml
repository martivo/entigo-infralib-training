apiVersion: v1
kind: Service
metadata:
  name: redis
  labels:
    category: database
spec:
  ports:
  - name: redis
    port: 6379
    protocol: TCP
    targetPort: 6379
  selector:
    app: redis
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: redis
  labels:
    category: database
spec:
  storageClassName: {{ .Values.redis.diskType }}
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: {{ .Values.redis.diskSize }}
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis
  labels:
    category: database
spec:
  selector:
    matchLabels:
      app: redis
  serviceName: "redis"
  replicas: 1
  template:
    metadata:
      labels:
        app: redis
        category: database
    spec:
      terminationGracePeriodSeconds: 10
      containers:
      - name: redis
        image: {{ .Values.image.repository }}library/redis:6
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        livenessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 60
          timeoutSeconds: 10
          periodSeconds: 15
        readinessProbe:
          tcpSocket:
            port: 6379
          initialDelaySeconds: 1
          timeoutSeconds: 5
          periodSeconds: 5
        resources:
          requests:
            memory: 16Mi
            cpu: 10m
          limits:
            memory: 256Mi
            cpu: 1000m
        ports:
        - containerPort: 6379
          name: redis
        volumeMounts:
        - mountPath: /data
          name: data
      volumes:
       - name: data
         persistentVolumeClaim:
           claimName: redis 
